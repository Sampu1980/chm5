/**************************************************************************
   Copyright (c) 2020 Infinera
**************************************************************************/
#ifndef DP_COMMON_H
#define DP_COMMON_H

namespace DataPlane {

// TODO  to run stand alone MS
#define CONNECT_TO_REDIS 1

#define EN_FLT_LOG  1
#ifdef EN_FLT_LOG
#define LOG_FLT() INFN_LOG(SeverityLevel::info)
#else
#define LOG_FLT() INFN_LOG(SeverityLevel::debug)
#endif

enum  { DCO_MAX_SERDES_LANES = 32  };
enum  { MAX_SCGS = 2  };
enum  { MAX_CARRIERS = 2  };
enum  { MAX_CLIENTS = 16  };
enum  { MAX_MTU_SIZE = 16384  };
enum  { MAX_TTI_LENGTH = 64  };
enum  { MAX_25G_TIME_SLOT = 64  };
enum  { MAX_TOM_ID = 16 };
enum  { MAX_GIGE_ID = 16 };
enum  { MAX_CARRIER_ID = 2 };

#define NEW_ODU_AID_FORMAT 1
#ifdef NEW_ODU_AID_FORMAT
#if 0
enum  { MAX_ODU_ID = 38  };
enum  { MAX_OTU_ID = 38  };
#else
enum  { MAX_ODU_ID = 48  };
enum  { MAX_OTU_ID = 18  };
#endif
#else
enum  { MAX_ODU_ID = 34  };
enum  { MAX_OTU_ID = 34  };
#endif

enum  { MAX_XCON_ID = 40  };

// OTU client id is from 1-16.  17-18 is for HO-OTUCni.
enum  { HO_OTU_ID_OFFSET = 16 };
enum  { HO_OTU_ID_1 = 17 };
enum  { HO_OTU_ID_2 = 18 };
// ODU client id is from 33-48.  1-32 is for LO-ODU
enum  { CLIENT_ODU_ID_OFFSET = 32  };

enum  { MIN_ODU_ID = 1  };
enum  { MIN_OTU_ID = 1  };
enum  { MAX_ODU4_TS = 4  };
enum  { MAX_ODUFLEX_TS = 16  };
enum  { MAX_SERDES_LANENUM_100G = 2  };
enum  { MAX_SERDES_LANENUM_400G = 8  };
enum  { MAX_GCC_VLAN = 32  };


enum ClientMode {
      CLIENTMODE_UNSET = 0,
      CLIENTMODE_LXTP_E = 1,
      CLIENTMODE_LXTP_M = 2,
      CLIENTMODE_LXTP = 3
};

enum PortRate {
    PORT_RATE_UNSET = 0,
    PORT_RATE_ETH100G = 1,
    PORT_RATE_ETH400G = 2,
    PORT_RATE_ETH200G = 3
};

enum Direction {
    DIRECTION_UNSET = 0,
    DIRECTION_TX = 1,
    DIRECTION_RX = 2
};

enum LoopBackType {
    LOOP_BACK_TYPE_UNSPECIFIED = 0,
    LOOP_BACK_TYPE_OFF    = 1,
    LOOP_BACK_TYPE_FACILITY    = 2,
    LOOP_BACK_TYPE_TERMINAL    = 3
};

enum MaintenanceSignal {
    MAINTENANCE_SIGNAL_UNSPECIFIED = 0,
    MAINTENANCE_SIGNAL_NOREPLACE = 1,
    MAINTENANCE_SIGNAL_LASEROFF = 2,
    MAINTENANCE_SIGNAL_RF = 3,
    MAINTENANCE_SIGNAL_IDLE = 4,
    MAINTENANCE_SIGNAL_LF = 5,
    MAINTENANCE_SIGNAL_OCI = 6,  // OTUCni
    MAINTENANCE_SIGNAL_LCK = 7,  // OTUCni
    MAINTENANCE_SIGNAL_AIS = 8,  // OTUCni
    MAINTENANCE_SIGNAL_PRBS_X31 = 9,  // OTU client
    MAINTENANCE_SIGNAL_PRBS_X31_INV = 10,  // OTU client
};

enum SerdesSpeed {
    SERDES_SPEED_UNSPECIFIED = 0,
    SERDES_SPEED_25G = 1,
    SERDES_SPEED_50G = 2
};

enum RefClockConfig {
    REFCLOCKCONFIG_UNSPECIFIED = 0,
    REFCLOCKCONFIG_E1_E9 = 1,
    REFCLOCKCONFIG_M1_M9 = 2,
    REFCLOCKCONFIG_X1_X9 = 3,
};

enum PostStatus {
    POSTSTATUS_UNSPECIFIED = 0,
    POSTSTATUS_SUCCECED = 1,
    POSTSTATUS_FAULTED = 2
};

enum DcoState {
    DCOSTATE_UNSPECIFIED = 0,
    DCOSTATE_BRD_INIT = 1,
    DCOSTATE_DSP_CONFIG = 2,
    DCOSTATE_LOW_POWER = 3,
    DCOSTATE_POWER_UP = 4,
    DCOSTATE_POWER_DOWN = 5,
    DCOSTATE_FAULTED = 6,
};

enum EthernetFlexType {
    ETHERNETFLEXTYPE_UNSPECIFIED = 0,
    ETHERNETFLEXTYPE_NONE = 1,
};

enum EthernetMode {
    ETHERNETMODE_UNSPECIFIED = 0,
    ETHERNETMODE_TRANSPARENT = 1,
    ETHERNETMODE_RETIMED = 2,
};

enum InterfaceType {
    INTERFACETYPE_UNSPECIFIED = 0,
    INTERFACETYPE_CAUI_4 = 1,
    INTERFACETYPE_GAUI = 2,
    INTERFACETYPE_LAUI_2 = 3,
    INTERFACETYPE_OTL_4_2 = 4,
};

enum ServiceMode {
    SERVICEMODE_UNSPECIFIED = 0,
    SERVICEMODE_NONE = 1,
    SERVICEMODE_TRANSPORT = 2,
    SERVICEMODE_SWITCHING = 3,
    SERVICEMODE_ADAPTATION = 4,
};

enum ServiceModeQualifier {
    SERVICEMODEQUALIFIER_UNSPECIFIED = 0,
    SERVICEMODEQUALIFIER_NONE = 1,
};

enum ClientStatus {
    CLIENTSTATUS_UNSPECIFIED = 0,
    CLIENTSTATUS_UP = 1,
    CLIENTSTATUS_DOWN = 2,
    CLIENTSTATUS_FAULTED = 3,
};

enum CarrierState {
    CARRIERSTATE_UNSPECIFIED = 0,
    CARRIERSTATE_ACTIVE = 1,
    CARRIERSTATE_STANDBY = 2,
    CARRIERSTATE_AUTODISCOVERY = 3,
    CARRIERSTATE_UNDEFINED = 4,
};

enum CarrierChannel {
    CARRIERCHANNEL_UNSPECIFIED = 0,
    CARRIERCHANNEL_ONE = 1,
    CARRIERCHANNEL_TWO = 2,
    CARRIERCHANNEL_BOTH = 3,
};

enum PrbsMode {
    PRBSMODE_UNSPECIFIED = 0,
    PRBSMODE_PRBS_NONE = 1,
    PRBSMODE_PRBS_X31 = 2,
    PRBSMODE_PRBS_X31_INV = 3,
};

enum OtuSubType {
    OTUSUBTYPE_UNSPECIFIED = 0,
    OTUSUBTYPE_LINE = 1,
    OTUSUBTYPE_CLIENT = 2,
};

enum OtuPayLoad {
    OTUPAYLOAD_UNSPECIFIED = 0,
    OTUPAYLOAD_OTUCNI = 1,
    OTUPAYLOAD_OTU4 = 2,
};

enum OduSubType {
    ODUSUBTYPE_UNSPECIFIED = 0,
    ODUSUBTYPE_LINE = 1,
    ODUSUBTYPE_CLIENT = 2,
};

enum OduPayLoad {
    ODUPAYLOAD_UNSPECIFIED = 0,
    ODUPAYLOAD_ODU4 = 1,
    ODUPAYLOAD_LO_ODU4I = 2,
    ODUPAYLOAD_LO_FLEXI = 3,
    ODUPAYLOAD_HO_ODUCNI = 4,
    ODUPAYLOAD_LO_ODU4 = 5,
};

enum OduMsiPayLoad {
    ODUMSIPAYLOAD_UNALLOCATED = 0,
    ODUMSIPAYLOAD_ODU4I_OTU4 = 1,
    ODUMSIPAYLOAD_ODU4I_ODU4 = 2,
    ODUMSIPAYLOAD_ODU4 = 3,
    ODUMSIPAYLOAD_ODU4I_100GE = 4,
    ODUMSIPAYLOAD_ODUFLEXI_25GE = 5,
    ODUMSIPAYLOAD_ODUFLEXI_50GE = 6,
    ODUMSIPAYLOAD_ODUFLEXI_75GE = 7,
    ODUMSIPAYLOAD_ODUFLEXI_100GE = 8,
    ODUMSIPAYLOAD_ODUFLEXI_200GE = 9,
    ODUMSIPAYLOAD_ODUFLEXI_400GE = 10,
};

// Time slot granularity
enum TsGranularity {
    TSGRANULARITY_UNSPECIFIED = 0,
    TSGRANULARITY_25G = 1,
};

// Time slot granularity
enum XconDirection {
    XCONDIRECTION_UNSPECIFIED = 0,
    XCONDIRECTION_INGRESS = 1,
    XCONDIRECTION_EGRESS = 2,
    XCONDIRECTION_BI_DIR = 3,
};

enum XconPayLoadTreatment {
    XCONPAYLOADTREATMENT_UNSPECIFIED = 0,
    XCONPAYLOADTREATMENT_TRANSPORT = 1,
    XCONPAYLOADTREATMENT_SWITCHING = 2,
    XCONPAYLOADTREATMENT_TRANSPORT_WO_FEC = 3,
    XCONPAYLOADTREATMENT_REGEN = 4,
    XCONPAYLOADTREATMENT_REGEN_SWITCHING = 5,
};

enum XconPayLoadType {
    XCONPAYLOADTYPE_UNSPECIFIED = 0,
    XCONPAYLOADTYPE_100GBE = 1,
    XCONPAYLOADTYPE_400GBE = 2,
    XCONPAYLOADTYPE_OTU4 = 3,
    XCONPAYLOADTYPE_100G = 4,  // for ODU4 Switching
};

enum CarrierModeStatus {
    CARRIERMODESTATUS_UNSPECIFIED = 0,
    CARRIERMODESTATUS_SUPPORTED = 1,
    CARRIERMODESTATUS_CANDIDATE = 2,
    CARRIERMODESTATUS_EXPERIMENTAL = 3,
    CARRIERMODESTATUS_DEPRECATED = 4,
};

enum CarrierAdvParmStatus {
    CARRIERADVPARMSTATUS_UNSPECIFIED = 0,
    CARRIERADVPARMSTATUS_SET = 10,
    CARRIERADVPARMSTATUS_UNKNOWN = 20,
    CARRIERADVPARMSTATUS_INPROGRESS = 30,
    CARRIERADVPARMSTATUS_FAILED = 40,
    CARRIERADVPARMSTATUS_NOT_SUPPORTED = 50,
};

enum FwUpgradeState {
    FWUPGRADESTATE_UNSPECIFIED = 0,
    FWUPGRADESTATE_IDLE = 1,
    FWUPGRADESTATE_DOWNLOAD_IN_PROGESS = 2,
    FWUPGRADESTATE_DOWNLOAD_COMPLETE = 3,
    FWUPGRADESTATE_INSTALL_IN_PROGRESS = 4,
    FWUPGRADESTATE_INSTALL_COMPLETE = 5,
    FWUPGRADESTATE_ACTIVATE_IN_PROGRESS = 6,
    FWUPGRADESTATE_ACTIVATE_COMPLETE = 7,
    FWUPGRADESTATE_ISK_OP_IN_PROGRESS = 8,
    FWUPGRADESTATE_ISK_OP_COMPLETE = 9,
    FWUPGRADESTATE_DOWNLOAD_FAILED = 10,
    FWUPGRADESTATE_INSTALL_FAILED = 11,
    FWUPGRADESTATE_ACTIVATE_FAILED = 12,
    FWUPGRADESTATE_ISK_OP_FAILED = 13,
};

enum FaultDirection {
    FAULTDIRECTION_UNSPECIFIED = 0,
    FAULTDIRECTION_RX = 1,
    FAULTDIRECTION_TX = 2,
    FAULTDIRECTION_NA = 3,
};

enum FaultLocation {
    FAULTLOCATION_UNSPECIFIED = 0,
    FAULTLOCATION_NEAR_END = 1,
    FAULTLOCATION_FAR_END = 2,
    FAULTLOCATION_NA = 3,
};

enum PmDirection {
    PMDIRECTION_UNSPECIFIED = 0,
    PMDIRECTION_RX = 1,
    PMDIRECTION_TX = 2,
    PMDIRECTION_NA = 3,
};

enum PmLocation {
    PMLOCATION_UNSPECIFIED = 0,
    PMLOCATION_NEAR_END = 1,
    PMLOCATION_FAR_END = 2,
    PMLOCATION_NA = 3,
};

    // CHM6 Design time allocation of normalized VLAN Ids in DCO OFEC-CC
enum NormalizedVlanIdInOfecCc {      // Normalized Vlan Id In Ofec Cc
    NORMALIZED_VLANID_OFEC_CC_UNSPECIFIED = 0,
    NORMALIZED_VLANID_OFEC_CC_NXP_PEER_DISCOVERY = 40,
    NORMALIZED_VLANID_OFEC_CC_MGMT = 45, // XMM MGMT
    NORMALIZED_VLANID_OFEC_CC_IKE = 46,
    NORMALIZED_VLANID_OFEC_CC_BC = 48   // DCO Backchannel
};

enum ControlChannelVlanIdx {
    CONTROLCHANNELVLANIDX_UNSPECIFIED = 0,
    CONTROLCHANNELVLANIDX_RESERVED = 1,
    CONTROLCHANNELVLANIDX_NB_DISCOVERY_CARRIER_1 = 2,
    CONTROLCHANNELVLANIDX_NB_DISCOVERY_CARRIER_2 = 3,
    CONTROLCHANNELVLANIDX_MGMT_CARRIER_1 = 4,
    CONTROLCHANNELVLANIDX_MGMT_CARRIER_2 = 5,
    CONTROLCHANNELVLANIDX_BACK_CHANNEL_CARRIER_1 = 6,
    CONTROLCHANNELVLANIDX_BACK_CHANNEL_CARRIER_2 = 7,
    CONTROLCHANNELVLANIDX_IKE_CARRIER_1 = 8,
    CONTROLCHANNELVLANIDX_IKE_CARRIER_2 = 9,
    CONTROLCHANNELVLANIDX_MAX = 32,
};

enum ControlChannelCarrier {
    CONTROLCHANNELCARRIER_UNSPECIFIED = 0,
    CONTROLCHANNELCARRIER_1 = 1,
    CONTROLCHANNELCARRIER_2 = 2,
};

enum ControlChannelType {
    CONTROLCHANNELTYPE_UNSPECIFIED = 0,
    CONTROLCHANNELTYPE_OFEC = 1,
    CONTROLCHANNELTYPE_IFEC = 2,
    CONTROLCHANNELTYPE_NB_DISCOVERY = 3,
    CONTROLCHANNELTYPE_MANAGEMENT = 4,
    CONTROLCHANNELTYPE_BACK_CHANNEL = 5,
    CONTROLCHANNELTYPE_IKE = 6,
};

enum BootState {
    BOOTSTATE_UNSPECIFIED = 0,
    BOOTSTATE_CARD_UP = 1,
    BOOTSTATE_IN_PROGRESS = 2,
    BOOTSTATE_REJECTED = 3,
};

// Advanced Parameters Direction
enum AdvParmDirection {
    ADVPARMDIRECTION_UNSPECIFIED = 0,
    ADVPARMDIRECTION_TX = 1,
    ADVPARMDIRECTION_RX = 2,
    ADVPARMDIRECTION_BI_DIR = 3,
};

enum AdvParmConfigImpact {
    ADVPARMCONFIGIMPACT_UNSPECIFIED = 0,
    ADVPARMCONFIGIMPACT_NO_CHANGE = 1,
    ADVPARMCONFIGIMPACT_NO_RE_ACQUIRE = 2,
    ADVPARMCONFIGIMPACT_RE_ACQUIRE = 3,
    ADVPARMCONFIGIMPACT_FULL_CONFIG_PLL_CHANGE = 4,
    ADVPARMCONFIGIMPACT_FULL_CONFIG_NO_PLL_CHANGE = 5,
};

enum AdvParmServiceImpact {
    ADVPARMSERVICEIMPACT_UNSPECIFIED = 0,
    ADVPARMSERVICEIMPACT_SERVICE_EFFECTING = 1,
    ADVPARMSERVICEIMPACT_NON_SERVICE_EFFECTING = 2,
};

enum OpStatus {
    OPSTATUS_UNSPECIFIED = 0,
    OPSTATUS_SUCCESS = 1,
    OPSTATUS_SDK_EXCEPTION = 2,
    OPSTATUS_INVALID_PARAM = 3,
    OPSTATUS_OPERATIONAL_ERROR = 4,
    OPSTATUS_UNDEFINED = 5,
};

const unsigned int portLow0[]  = {2, 1, 3, 4};
const unsigned int portHigh0[] = {7, 8, 5, 6};
const unsigned int portLow1[]  = {10, 9, 11, 12};
const unsigned int portHigh1[] = {15, 16, 13, 14};

// BootUp Traffic
const unsigned int cBootUpTrafficTimeout = 600;
const unsigned int cFaultStableTimeout = 150;

// GNMI Server Port
const std::string cGnmiPortNum = "50051";

//debug flag, only used for cli
extern bool mPmDebugEnable;
extern bool mPmTimeEnable;

const int8_t spanTime = 20;

#define GEN_GNMI_ADDR(ip_addr) ( ip_addr + ":" + DataPlane::cGnmiPortNum )

} /* DataPlane */
#endif // DP_COMMON_H
